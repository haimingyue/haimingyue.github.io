<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>小程序项目公共机制封装</title>
      <link href="/2019/12/11/xiao-cheng-xu-xiang-mu-gong-gong-ji-zhi-feng-zhuang/"/>
      <url>/2019/12/11/xiao-cheng-xu-xiang-mu-gong-gong-ji-zhi-feng-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="微信小程序分享之小程序公共机制的封装"><a href="#微信小程序分享之小程序公共机制的封装" class="headerlink" title="微信小程序分享之小程序公共机制的封装"></a>微信小程序分享之小程序公共机制的封装</h2><h2 id="小程序文件目录"><a href="#小程序文件目录" class="headerlink" title="小程序文件目录"></a>小程序文件目录</h2><pre><code>|____app.json|____project.config.json|____utils| |____util.js| |____store.js| |____router.js|____env| |____index.js|____app.wxss|____http| |____request.js| |____api.js|____assets| |____images|____pages| |____activity| |____pay| |____index|____app.js</code></pre><h2 id="环境变量的配置"><a href="#环境变量的配置" class="headerlink" title="环境变量的配置"></a>环境变量的配置</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// env.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mockApi<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  Dev<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  Test<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  Slave<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  Prod<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//app.js</span><span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./env/index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> env <span class="token operator">=</span> <span class="token string">"DEV"</span><span class="token punctuation">;</span>App<span class="token punctuation">.</span>version <span class="token operator">=</span> <span class="token string">"1.0.0"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 开发版本</span>App<span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token punctuation">[</span>env<span class="token punctuation">]</span><span class="token punctuation">;</span>App<span class="token punctuation">.</span>config<span class="token punctuation">.</span>env <span class="token operator">=</span> env<span class="token punctuation">;</span><span class="token keyword">let</span> Api <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./http/api.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  Api<span class="token punctuation">:</span> Api<span class="token punctuation">,</span>  onLaunch<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  globalData<span class="token punctuation">:</span> <span class="token punctuation">{</span>    userInfo<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="router-的封装"><a href="#router-的封装" class="headerlink" title="router 的封装"></a>router 的封装</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> routerPath <span class="token operator">=</span> <span class="token punctuation">{</span>  index<span class="token punctuation">:</span> <span class="token string">"/pages/index/index"</span><span class="token punctuation">,</span>  pay<span class="token punctuation">:</span> <span class="token string">"/pages/pay/index"</span><span class="token punctuation">,</span>  activity<span class="token punctuation">:</span> <span class="token string">"/pages/activity/index"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> option <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> path <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      option<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      option <span class="token operator">=</span> path<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> url <span class="token operator">=</span> routerPath<span class="token punctuation">[</span>option<span class="token punctuation">.</span>path<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span> query <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> openType<span class="token punctuation">,</span> duration <span class="token punctuation">}</span> <span class="token operator">=</span> option<span class="token punctuation">;</span>    <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    url <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"?"</span> <span class="token operator">+</span> params<span class="token punctuation">;</span>    duration      <span class="token operator">?</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>openType<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> duration<span class="token punctuation">)</span>      <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>openType<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ley <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">to</span><span class="token punctuation">(</span>openType<span class="token punctuation">,</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> url <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>openType <span class="token operator">===</span> <span class="token string">"redirect"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      wx<span class="token punctuation">.</span><span class="token function">redirectTo</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>openType <span class="token operator">===</span> <span class="token string">"reLaunch"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      wx<span class="token punctuation">.</span><span class="token function">redirectTo</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="store-的封装"><a href="#store-的封装" class="headerlink" title="store 的封装"></a>store 的封装</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> STORAGE_KEY <span class="token operator">=</span> <span class="token string">"imooc_pay"</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> module_name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>module_name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> module_name_info <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>module_name<span class="token punctuation">)</span><span class="token punctuation">;</span>      module_name_info<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>      wx<span class="token punctuation">.</span><span class="token function">setStorageSync</span><span class="token punctuation">(</span>module_name<span class="token punctuation">,</span> module_name_info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      wx<span class="token punctuation">.</span><span class="token function">setStorageSync</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> module_name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>module_name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>module_name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> val<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> wx<span class="token punctuation">.</span><span class="token function">getStorageSync</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">clear</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    key <span class="token operator">?</span> wx<span class="token punctuation">.</span><span class="token function">removeStorageSync</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> wx<span class="token punctuation">.</span><span class="token function">clearStorageSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="Request-封装"><a href="#Request-封装" class="headerlink" title="Request 封装"></a>Request 封装</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../utils/store"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> clientInfo <span class="token operator">=</span> <span class="token punctuation">{</span>  clientType<span class="token punctuation">:</span> <span class="token string">"mp"</span><span class="token punctuation">,</span>  appnm<span class="token punctuation">:</span> <span class="token string">"imoocpay"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  fetch<span class="token punctuation">:</span> <span class="token punctuation">(</span>    url<span class="token punctuation">,</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> loading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> toast <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> isMock <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"get"</span> <span class="token punctuation">}</span>  <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>loading<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ex<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          title<span class="token punctuation">:</span> <span class="token string">"加载中..."</span><span class="token punctuation">,</span>          mask<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">let</span> env <span class="token operator">=</span> isMock <span class="token operator">?</span> App<span class="token punctuation">.</span>config<span class="token punctuation">.</span>mockApi <span class="token punctuation">:</span> App<span class="token punctuation">.</span>config<span class="token punctuation">.</span>baseApi<span class="token punctuation">;</span>      wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token punctuation">:</span> env <span class="token operator">+</span> url<span class="token punctuation">,</span>        data<span class="token punctuation">,</span>        method<span class="token punctuation">,</span>        header<span class="token punctuation">:</span> <span class="token punctuation">{</span>          clientInfo<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>clientInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">let</span> res <span class="token operator">=</span> result<span class="token punctuation">.</span>data<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>loading<span class="token punctuation">)</span> <span class="token punctuation">{</span>              wx<span class="token punctuation">.</span><span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>toast<span class="token punctuation">)</span> <span class="token punctuation">{</span>              wx<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                title<span class="token punctuation">:</span> res<span class="token punctuation">.</span>message<span class="token punctuation">,</span>                icon<span class="token punctuation">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                mask<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              wx<span class="token punctuation">.</span><span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">reject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        fail<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token punctuation">{</span> code<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> msg<span class="token punctuation">:</span> errMsg<span class="token punctuation">,</span> errMsg <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">let</span> msg <span class="token operator">=</span> e<span class="token punctuation">.</span>errMsg<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">===</span> <span class="token string">"request:fail timeout"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            msg <span class="token operator">=</span> <span class="token string">"服务请求超时, 请稍后处理"</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          wx<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            title<span class="token punctuation">:</span> msg<span class="token punctuation">,</span>            icon<span class="token punctuation">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node实现调用微信jssdk接入分享</title>
      <link href="/2019/12/08/node-shi-xian-diao-yong-wei-xin-jssdk-jie-ru-fen-xiang/"/>
      <url>/2019/12/08/node-shi-xian-diao-yong-wei-xin-jssdk-jie-ru-fen-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="支付项目后端笔记"><a href="#支付项目后端笔记" class="headerlink" title="支付项目后端笔记"></a>支付项目后端笔记</h2><p>全局安装 express</p><p><code>npm i express-generator -g</code></p><h2 id="微信用户授权"><a href="#微信用户授权" class="headerlink" title="微信用户授权"></a>微信用户授权</h2><ul><li><p>插件<code>request</code>&amp;<code>memory-cache</code>(类似 redis)</p></li><li><p>Vue 调用 node，Node 调用微信</p></li></ul><h4 id="微信授权跳转"><a href="#微信授权跳转" class="headerlink" title="微信授权跳转"></a>微信授权跳转</h4><p>Node 端跳转到微信端，获取 openId。</p><p>node 端获取到 openId 之后，向客户端写入 Cookie。</p><h2 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h2><h4 id="一、第一步"><a href="#一、第一步" class="headerlink" title="一、第一步"></a>一、第一步</h4><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/redirect"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> redirectUrl <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>url<span class="token punctuation">;</span>  cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"redirectUrl"</span><span class="token punctuation">,</span> redirectUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> scope <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>scope<span class="token punctuation">;</span>  <span class="token keyword">let</span> callback <span class="token operator">=</span> <span class="token string">"http%3A%2F%2Fm.imooc.com%2Fapi%2Fwechat%2FgetOpenId"</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> authorizeUrl <span class="token operator">=</span> <span class="token template-string"><span class="token string">`https://open.weixin.qq.com/connect/oauth2/authorize?appid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span>appId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;redirect_uri=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>callback<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;response_type=code&amp;scope=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>scope<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;state=STATE#wechat_redirect`</span></span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span>authorizeUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>解释：</p><ul><li>前端访问<code>/api/wechat/redirect</code>接口，带着 url 的参数和 scope 的参数</li><li>获取这两个参数，并且把 url 保存（cache）起来</li><li>声明回调地址–&gt; 第二个后端接口<code>getOpenID</code></li><li>重定向到微信的地址<code>authorizeUrl</code>,以获取 code。</li></ul><h4 id="二、第二步：根据-code-码获取-appId，种植到前端-cookie"><a href="#二、第二步：根据-code-码获取-appId，种植到前端-cookie" class="headerlink" title="二、第二步：根据 code 码获取 appId，种植到前端 cookie"></a>二、第二步：根据 code 码获取 appId，种植到前端 cookie</h4><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/getOpenId"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> code <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>code<span class="token punctuation">;</span>  <span class="token keyword">let</span> token_url <span class="token operator">=</span> <span class="token template-string"><span class="token string">`https://api.weixin.qq.com/sns/oauth2/access_token?appid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span>appId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;secret=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span>appsecret<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;code=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;grant_type=authorization_code`</span></span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      code<span class="token punctuation">:</span> <span class="token string">"1001"</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      message<span class="token punctuation">:</span> <span class="token string">"未获取到code授权码"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    request<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>token_url<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>statusCode <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> expire_time <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">"openId"</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>openid<span class="token punctuation">,</span> <span class="token punctuation">{</span> maxAge<span class="token punctuation">:</span> expire_time <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> redirectUrl <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"redirectUrl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"redirectUrl"</span><span class="token punctuation">,</span> redirectUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span>redirectUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log('err', error)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>解释：</p><ul><li><p>根据获取的 code 码，去再次访问微信提供的接口<code>token_url</code>,参数参见文档<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html#1" target="_blank" rel="noopener">2 第二步：通过 code 换取网页授权 access_token</a></p></li><li><p>获取到 OpenId 之后，把 cookie 种植到前端</p><p><code>res.cookie('openId', data.openid, { maxAge: expire_time })</code></p></li><li><p>然后重定向到前端页面<code>res.redirect(redirectUrl)</code></p></li></ul><h2 id="重新整理，封装公用方法"><a href="#重新整理，封装公用方法" class="headerlink" title="重新整理，封装公用方法"></a>重新整理，封装公用方法</h2><p><strong>util 封装微信接口状态码处理</strong></p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 对微信接口的状态码等统一处理</span>  <span class="token function">handleResponse</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>statusCode <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 对请求返回统一处理</span>      <span class="token keyword">let</span> data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"body::"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>data<span class="token punctuation">.</span>errcode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleSuc</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleFail</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>errmessage<span class="token punctuation">,</span> data<span class="token punctuation">.</span>errcode<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleFail</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token number">10009</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 返回成功的数据封装</span>  <span class="token function">handleSuc</span><span class="token punctuation">(</span>data <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      code<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      data<span class="token punctuation">,</span>      message<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 返回失败的数据封装</span>  <span class="token function">handleFail</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> code <span class="token operator">=</span> <span class="token number">10001</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      code<span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      message<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>common 封装获取 token 方法，H5、小程序调用</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* 微信接口统一封装 */</span><span class="token keyword">let</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./../pay/config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../../util/index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config <span class="token operator">=</span> config<span class="token punctuation">.</span>wx<span class="token punctuation">;</span>exports<span class="token punctuation">.</span>getAccessTocken <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> token_url <span class="token operator">=</span> <span class="token template-string"><span class="token string">`https://api.weixin.qq.com/sns/oauth2/access_token?appid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span>appId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;secret=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span>appsecret<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;code=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;grant_type=authorization_code`</span></span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"token_url"</span><span class="token punctuation">,</span> token_url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    request<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>token_url<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">handleResponse</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"result::"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>重写 getOpenId</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* 微信接口统一封装 */</span><span class="token keyword">let</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./../pay/config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../../util/index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config <span class="token operator">=</span> config<span class="token punctuation">.</span>wx<span class="token punctuation">;</span>exports<span class="token punctuation">.</span>getAccessTocken <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> token_url <span class="token operator">=</span> <span class="token template-string"><span class="token string">`https://api.weixin.qq.com/sns/oauth2/access_token?appid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span>appId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;secret=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span>appsecret<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;code=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;grant_type=authorization_code`</span></span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"token_url"</span><span class="token punctuation">,</span> token_url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    request<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>token_url<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">handleResponse</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"result::"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>至此，获取到 openid 了，并且存到客户端的 cookie 中。</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9n8vfmro5j327a0h2wi4.jpg" alt="image-20191206195031199"></p><h2 id="拉用户信息"><a href="#拉用户信息" class="headerlink" title="拉用户信息"></a>拉用户信息</h2><p><strong>node</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// common.js</span>exports<span class="token punctuation">.</span>getUserInfo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>access_token<span class="token punctuation">,</span> openId<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> userinfo <span class="token operator">=</span> <span class="token template-string"><span class="token string">`https://api.weixin.qq.com/sns/userinfo?access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>access_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;openid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>openId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;lang=zh_CN`</span></span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>userinfo<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> response<span class="token punctuation">,</span> bocy<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">handleResponse</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> response<span class="token punctuation">,</span> bocy<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 路由定义</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/getUserInfo"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 调用common封装的微信方法</span>  <span class="token keyword">let</span> access_token <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> openId <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"openId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> common<span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span>access_token<span class="token punctuation">,</span> openId<span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>*<em>前端调用 *</em></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$cookie<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'openId'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>API<span class="token punctuation">.</span>getUserInfo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userInfo <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9nboscifij327a0mk0yw.jpg" alt="image-20191206212756882"></p><h2 id="生成-jssdk-签名算法"><a href="#生成-jssdk-签名算法" class="headerlink" title="生成 jssdk 签名算法"></a>生成 jssdk 签名算法</h2><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html" target="_blank" rel="noopener">官方文档 1</a></p><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#62" target="_blank" rel="noopener">官方文档 2</a></p><p><strong>必要条件</strong></p><pre class=" language-js"><code class="language-js">timestamp<span class="token punctuation">:</span> <span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 必填，生成签名的时间戳</span>nonceStr<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 必填，生成签名的随机串</span>signature<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 必填，签名</span></code></pre><p><strong>1、获取基础 token（注意和网页授权 token 的区别）</strong></p><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html" target="_blank" rel="noopener">获取基础 token 官方文档</a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 获取基础token</span>exports<span class="token punctuation">.</span>getToken <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> token <span class="token operator">=</span> <span class="token template-string"><span class="token string">`https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span>appId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;secret=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span>appsecret<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> response<span class="token punctuation">,</span> bocy<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">handleResponse</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> response<span class="token punctuation">,</span> bocy<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>2、获取 ticket</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 获取ticket</span>exports<span class="token punctuation">.</span>getTicket <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> tokenUrl <span class="token operator">=</span> <span class="token template-string"><span class="token string">`https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;type=jsapi`</span></span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>tokenUrl<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> response<span class="token punctuation">,</span> bocy<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">handleResponse</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> response<span class="token punctuation">,</span> bocy<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>3、生成随机数和时间戳</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 生成随机数</span><span class="token function">createNonceStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 生成时间戳</span>  <span class="token function">createTimeStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">''</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p><strong>4、对参数排序</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// object 转换成json并且排序</span><span class="token function">raw</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  keys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 将对象转成key value形式</span>  <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    val <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&amp;'</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p><strong>5、定义路由并调用上述方法</strong></p><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/jssdk"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"res"</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>url<span class="token punctuation">;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> common<span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> token <span class="token operator">=</span> result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>access_token<span class="token punctuation">;</span>    <span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token keyword">await</span> common<span class="token punctuation">.</span><span class="token function">getTicket</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"result2"</span><span class="token punctuation">,</span> result2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result2<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> data <span class="token operator">=</span> result2<span class="token punctuation">.</span>data<span class="token punctuation">;</span>      <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>        noncestr<span class="token punctuation">:</span> util<span class="token punctuation">.</span>createNonceStr<span class="token punctuation">,</span>        jsapi_ticket<span class="token punctuation">:</span> data<span class="token punctuation">.</span>ticket<span class="token punctuation">,</span>        timestamp<span class="token punctuation">:</span> util<span class="token punctuation">.</span>createTimeStamp<span class="token punctuation">,</span>        url<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> str <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> sign <span class="token operator">=</span> <span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">"sha1"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">"hex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>        util<span class="token punctuation">.</span><span class="token function">handleSuc</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          appId<span class="token punctuation">:</span> config<span class="token punctuation">.</span>appId<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 必填，公众号的唯一标识</span>          timestamp<span class="token punctuation">:</span> params<span class="token punctuation">.</span>timestamp<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 必填，生成签名的时间戳</span>          noncestr<span class="token punctuation">:</span> params<span class="token punctuation">.</span>noncestr<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 必填，生成签名的随机串</span>          signature<span class="token punctuation">:</span> sign<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 必填，签名</span>          jsApiList<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token string">"updateAppMessageShareData"</span><span class="token punctuation">,</span>            <span class="token string">"updateTimelineShareData"</span><span class="token punctuation">,</span>            <span class="token string">"chooseWXPay"</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 必填，需要使用的JS接口列表</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9pnst5msdj31j30u0n7n.jpg" alt="image-20191208215806464"></p><p>到此，成功调取 jssdk 的接口。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 微信开发 </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>h5share</title>
      <link href="/2019/12/03/h5share/"/>
      <url>/2019/12/03/h5share/</url>
      
        <content type="html"><![CDATA[<h1 id="H5-如何接入微信公众号"><a href="#H5-如何接入微信公众号" class="headerlink" title="H5 如何接入微信公众号"></a>H5 如何接入微信公众号</h1><h2 id="公众号分类"><a href="#公众号分类" class="headerlink" title="公众号分类"></a>公众号分类</h2><ul><li>服务号<ul><li>侧重于企业的服务</li><li>每月发表 4 次文章</li><li>用于媒体和企业</li></ul></li><li>订阅号<ul><li>用于个人</li><li>每天群发一次</li><li>不支持支付功能</li></ul></li><li>小程序</li></ul><p>公众号注册流程</p><p><a href="http://www.imooc.com/article/279586" target="_blank" rel="noopener">个人</a></p><p>需要注意的是，如果创建了公众号，服务类型就不能再更改了。</p><p><a href="https://kf.qq.com/faq/170104AJ3y26170104Yj673y.html" target="_blank" rel="noopener">各种权限接口说明</a></p><p><a href="http://www.imooc.com/article/281154" target="_blank" rel="noopener">服务号注册流程</a></p><h2 id="平台测试号的使用"><a href="#平台测试号的使用" class="headerlink" title="平台测试号的使用"></a>平台测试号的使用</h2><p>测试号可以使用分享功能</p><p><a href="https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index" target="_blank" rel="noopener">微信测试号地址</a></p><ul><li>分享功能需要的安全域名</li></ul><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9i9jf2t4qj31mk08e3zj.jpg" alt="image-20191202122543768"></p><p>注意： 服务号要绑定开发者。</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9i9qzzugrj31jw0tstb9.jpg" alt="image-20191202123303273"></p><p>验证安全域名</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9i9rqrr9lj319s0u013i.jpg" alt="image-20191202123323816"></p><p>网页授权域名是获取用户信息的回调域名。</p><h2 id="微信授权流程"><a href="#微信授权流程" class="headerlink" title="微信授权流程"></a>微信授权流程</h2><p>打开网页时候需要进行授权昵称。分享和支付之前必须要授权。</p><h4 id="业务域名-amp-js-接口安全域名-amp-网页授权域名的区别"><a href="#业务域名-amp-js-接口安全域名-amp-网页授权域名的区别" class="headerlink" title="业务域名&amp;js 接口安全域名&amp;网页授权域名的区别"></a>业务域名&amp;js 接口安全域名&amp;网页授权域名的区别</h4><ul><li>业务域名<ul><li>当前业务使用的域名</li><li>支付密码的时候，不会出现安全提示</li></ul></li><li>js 接口安全域名<ul><li>微信开放的接口使用安全域名</li></ul></li><li>网页授权域名<ul><li>打开 app 的时候，使用微信授权登录。</li><li>点击跳转微信的 app 内，然后回调到这个页面。配置回调页面必须是我们自己的页面。</li></ul></li></ul><h4 id="网页授权的-access-token-和-普通的-access-token-的区别"><a href="#网页授权的-access-token-和-普通的-access-token-的区别" class="headerlink" title="网页授权的 access_token 和 普通的 access_token 的区别"></a>网页授权的 access_token 和 普通的 access_token 的区别</h4><ul><li>网页授权的 access_token，用来获取用户的信息，头像逆臣</li><li>普通的：作用防范，调用非网页授权的所有接口</li></ul><h4 id="UnionID：-公众平台的唯一-ID（小程序、服务号统一-id）"><a href="#UnionID：-公众平台的唯一-ID（小程序、服务号统一-id）" class="headerlink" title="UnionID： 公众平台的唯一 ID（小程序、服务号统一 id）"></a>UnionID： 公众平台的唯一 ID（小程序、服务号统一 id）</h4><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9ia5vre2pj31b2084dhi.jpg" alt="image-20191202124721291"></p><p>使用场景：</p><p>每一个应用对一个用户分别对应 openid。但是 unionID 是唯一的。</p><h2 id="授权流程"><a href="#授权流程" class="headerlink" title="授权流程"></a>授权流程</h2><ul><li>用户统一授权</li><li>通过 Code 换区 Access_token</li><li>拉取用户信息</li></ul><p>静默授权和普通授权的区别</p><ul><li>静默授权不需要用户同意，但是无法获取用户的信息</li><li>用户同意授权。获取 code</li><li>通过 code 获取网页授权的 access_token</li><li>拿到 access_token 就可以拉去用户信息了。（scope：snsapi_userinfo）</li></ul><h2 id="JS-SDK-调用流程"><a href="#JS-SDK-调用流程" class="headerlink" title="JS-SDK 调用流程"></a>JS-SDK 调用流程</h2><ul><li>绑定域名：js 接口安全域名、业务域名…</li><li>引用 js-sdk 文件</li><li>通过 config 接口注入权限验证配置（先取到接口签名）</li><li>通过 ready 接口处理成功验证</li></ul><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html" target="_blank" rel="noopener">官方文档</a></p><p><a href="http://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index" target="_blank" rel="noopener">测试号申请地址</a></p><h2 id="H5-添加域名代理-amp-域名解析"><a href="#H5-添加域名代理-amp-域名解析" class="headerlink" title="H5 添加域名代理&amp;域名解析"></a>H5 添加域名代理&amp;域名解析</h2><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9imj8idb7j30oa07igmj.jpg" alt="image-20191202195523574"></p><h4 id="vue-如何使用代理？"><a href="#vue-如何使用代理？" class="headerlink" title="vue 如何使用代理？"></a>vue 如何使用代理？</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// vue.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置主机地址</span>    host<span class="token punctuation">:</span> <span class="token string">"m.imooc.com"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 设置默认端口</span>    port<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span>    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>      api<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置api地址</span>        target<span class="token punctuation">:</span> <span class="token string">"http://localhost:5000"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 如果要dailiwebsocker</span>        ws<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 将主机标头的原点改为目标url</span>        changeOrigin<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="修改本地-host-软件"><a href="#修改本地-host-软件" class="headerlink" title="修改本地 host 软件"></a>修改本地 host 软件</h2><p>百度网盘地址</p><pre><code>https://pan.baidu.com/s/1t4HjFvgYvfRNJxrbcSmTng</code></pre><p>修改方式</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9impy1p78j318p0u075q.jpg" alt="image-20191202200148733"></p><h2 id="H5-如何接入微信分享"><a href="#H5-如何接入微信分享" class="headerlink" title="H5 如何接入微信分享"></a>H5 如何接入微信分享</h2><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html" target="_blank" rel="noopener">官方文档</a></p><p>第一步：请求路由的配置</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// api_test: '/api/test'</span>  <span class="token comment" spellcheck="true">// 跳转放在服务端</span>  wechatRedirect<span class="token punctuation">:</span>    <span class="token string">"/wechat/redirect?url=http%3A%2F%2Fm.imooc.com%2Findex&amp;scope=snsapi_userinfo"</span><span class="token punctuation">,</span>  wechatConfig<span class="token punctuation">:</span> <span class="token string">"/wechat/jssdk"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 获取jssdk的接口</span>  getUserInfo<span class="token punctuation">:</span> <span class="token string">"/wechat/getUserInfo"</span><span class="token punctuation">,</span>  payWallet<span class="token punctuation">:</span> <span class="token string">"/wechat/pay/payWallet"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>第一步：判断是否登录</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkUserAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>   methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">checkUserAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> openId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$cookie<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'openId'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>openId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span>API<span class="token punctuation">.</span>wechatRedirect<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>第二步：获取 config 信息, 然后执行 ready 方法注入分享功能。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>API<span class="token punctuation">.</span>wechatConfig<span class="token operator">+</span><span class="token string">'?url='</span><span class="token operator">+</span>location<span class="token punctuation">.</span>href<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">let</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 注入config</span>          wx<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            debug<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span>            appId<span class="token punctuation">:</span> data<span class="token punctuation">.</span>appId<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 必填，公众号的唯一标识</span>            timestamp<span class="token punctuation">:</span> data<span class="token punctuation">.</span>timestamp<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 必填，生成签名的时间戳</span>            nonceStr<span class="token punctuation">:</span> data<span class="token punctuation">.</span>nonceStr<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 必填，生成签名的随机串</span>            signature<span class="token punctuation">:</span> data<span class="token punctuation">.</span>signature<span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 必填，签名</span>            jsApiList<span class="token punctuation">:</span> data<span class="token punctuation">.</span>jsApiList <span class="token comment" spellcheck="true">// 必填，需要使用的JS接口列表</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>          wx<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            util<span class="token punctuation">.</span><span class="token function">initShareInfo</span><span class="token punctuation">(</span>wx<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>注意：需要加上 url 进行签名（服务端完成）</p><p>第三步：分享资源的配置</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//util.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">initShareInfo</span><span class="token punctuation">(</span>wx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> shareInfo <span class="token operator">=</span> <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">"灯塔"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 分享标题</span>      desc<span class="token punctuation">:</span> <span class="token string">"描述"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 分享描述</span>      link<span class="token punctuation">:</span> <span class="token string">"http://m.imooc.com/#/index"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span>      imgUrl<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 分享图标</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    wx<span class="token punctuation">.</span><span class="token function">onMenuShareTimeline</span><span class="token punctuation">(</span>shareInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    wx<span class="token punctuation">.</span><span class="token function">onMenuShareAppMessage</span><span class="token punctuation">(</span>shareInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    wx<span class="token punctuation">.</span><span class="token function">onMenuShareQQ</span><span class="token punctuation">(</span>shareInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    wx<span class="token punctuation">.</span><span class="token function">onMenuShareQZone</span><span class="token punctuation">(</span>shareInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    wx<span class="token punctuation">.</span><span class="token function">updateAppMessageShareData</span><span class="token punctuation">(</span>shareInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    wx<span class="token punctuation">.</span><span class="token function">updateTimelineShareData</span><span class="token punctuation">(</span>shareInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 微信开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【读好书第一期】js高级程序设计之js基础知识</title>
      <link href="/2019/12/01/jsdeveloper1/"/>
      <url>/2019/12/01/jsdeveloper1/</url>
      
        <content type="html"><![CDATA[<p>《js 高级程序设计》俗称《红宝书》，是前端人员必读的一本好书，这次是我第二次看《红宝书》，希望可以将其中常见、常用的知识以及常常踩的误区，整理出来。</p><p>今天这篇内容，我们跳过了 JS 的历史，主要介绍了一下以下内容：</p><ul><li>Dom 的介绍</li><li>Bom 的介绍</li><li>js 如何在 html 中引用</li><li>js 的基本概念</li></ul><h2 id="Dom-和-Bom"><a href="#Dom-和-Bom" class="headerlink" title="Dom 和 Bom"></a>Dom 和 Bom</h2><h5 id="文档对象模型"><a href="#文档对象模型" class="headerlink" title="文档对象模型"></a>文档对象模型</h5><blockquote><p>文档 对象 模型（ DOM， Document Object Model） 是 针对 XML 但 经过 扩展 用于 HTML 的 应用 程序 编程 接口（ API， Application Programming Interface）。 DOM 把 整个 页面 映射 为 一个 多层 节点 结构。</p></blockquote><p>通俗点说：</p><blockquote><p>扩展的 xml，方便调用的 Dom 节点。</p></blockquote><p>作用： 删除、 添加、 替换 或 修改</p><h5 id="Dom"><a href="#Dom" class="headerlink" title="Dom"></a>Dom</h5><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8rzh9rbvwj30e40953yq.jpg" alt="image-20191109153003848"></p><h5 id="Bom"><a href="#Bom" class="headerlink" title="Bom"></a>Bom</h5><blockquote><p>BOM 只 处理 浏览器 窗口 和 框架； 但 人们 习惯上 也 把 所有 针对 浏览器 的 JavaScript 扩展 算作 BOM 的 一部分。</p></blockquote><p>作用：</p><ol><li>弹出新浏览器窗口的功能；</li><li>移动、 缩放和关闭浏览器窗口的功能；</li><li>提供浏览器详细信息 的 navigator 对象；</li><li>提供 浏览器 所加 载 页面 的 详细信息 的 location 对象；</li><li>提供 用户 显示器 分辨率 详细信息 的 screen 对象；</li><li>对 cookies 的 支持；</li><li>像 XMLHttpRequest 和 IE 的 ActiveXObject 这样 的 自定义 对象。</li></ol><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8rzhj4ku2j30aq072wei.jpg" alt="image-20191109153520857"></p><h2 id="Html-中使用-javascript"><a href="#Html-中使用-javascript" class="headerlink" title="Html 中使用 javascript"></a>Html 中使用 javascript</h2><h3 id="script-标签"><a href="#script-标签" class="headerlink" title="script 标签"></a>script 标签</h3><h4 id="script-的常用属性"><a href="#script-的常用属性" class="headerlink" title="script 的常用属性"></a>script 的常用属性</h4><ul><li>async：立即下载</li><li>charset：字符集</li><li>defer：延迟执行</li><li>src：外部链接</li><li>type：脚本类型，默认<code>text/ javascript</code></li></ul><p>注意：包含在<code>&lt;script&gt;</code>元素内部的 JavaScript 代码将被 从上至下依次解释。并且会阻塞代码执行。</p><h5 id="defer-的使用"><a href="#defer-的使用" class="headerlink" title="defer 的使用"></a>defer 的使用</h5><p>使用<code>defer</code>属性（defer 只适用于外部脚本）或者把 script 标签放在页面最后面，可以解决<code>js</code>阻塞页面加载，出现空白的情况。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> defer<span class="token operator">=</span><span class="token string">" defer"</span> src<span class="token operator">=</span><span class="token string">"example1.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h5 id="异步脚本"><a href="#异步脚本" class="headerlink" title="异步脚本"></a>异步脚本</h5><p><code>async</code>的作用和 defer 差不多，它让浏览器立即下载文件，但是 async 标记的脚本不保证执行顺序。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8rzhrjqgqj30ed0a6q39.jpg" alt="image-20191109155726038"></p><p>需要注意的是，<code>保留字</code>和<code>关键字</code>不能被使用。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>使用<code>val</code>就可以声明一个变量。如何声明那个这里不加赘述。需要注意的是，var 声明的变量是作用域中的局部变量。比如说，在<code>function</code>中用<code>var</code>定义一个变量，函数执行时就会生成一个变量，函数销毁的时候，就会销毁这个变量。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">"hi"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 局部 变量</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误！</span></code></pre><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>js 中有 5 种简单的数据类型 和一种复杂的数据类型。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8rzi01vqyj30ei0agjro.jpg" alt="image-20191109160848923"></p><h3 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h3><blockquote><p>因为 js 是松散型的，所以需要 typeof 来提供数据类型的信息。</p></blockquote><h5 id="typeof-需要注意的几个问题："><a href="#typeof-需要注意的几个问题：" class="headerlink" title="typeof 需要注意的几个问题："></a>typeof 需要注意的几个问题：</h5><ul><li>返回的值都是字符串</li></ul><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8rzi95231j30a80ca74l.jpg" alt="image-20191109161333628"></p><p>在这里你会注意到一个奇怪的问题，typeof 返回的值比基本数据类型少了一个 null，多了一个 function</p><p>这是因为 typeof null 返回的是 Object。这是 js 由来已久的 bug。</p><p>而 function 虽然是 Object，但是它在 js 中事<code>一等公民</code>，需要和其他的 Object 对象加以区分。</p><h4 id="null-和-undefined-的区别"><a href="#null-和-undefined-的区别" class="headerlink" title="null 和 undefined 的区别"></a>null 和 undefined 的区别</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">null</span> <span class="token operator">==</span> undefined<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>虽然上述的例子成立，但是 null 和 undefiled 是完全不同的两回事。</p><p><code>undefined</code>代表的是变量未声明，一般不用显示的去定义一个变量是<code>undefined</code>。</p><p><code>null</code>一般作为一个空指针对象，也就是说，你想声明一个未来需要保存对象的变量，就可以赋值为<code>null</code></p><h4 id="Number-类型"><a href="#Number-类型" class="headerlink" title="Number 类型"></a>Number 类型</h4><ul><li>浮点型</li><li>整形</li></ul><p>关于 Number 类型需要注意一下几点：</p><ul><li>你永远不要做下面这种危险的操作</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">.</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">" You got 0. 3."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这是因为，<code>0.1+0.2</code>的结果是<code>0.30000000000000004</code></p><p>究其原因是：</p><blockquote><p>这是使用基于 IEEE754 数值的浮点计算的通病， ECMAScript 并非独此 一家； 其他使用相同数值 格式的语言也存在这个问题。</p></blockquote><ul><li>Nan<ul><li>是表示本来要返回数值的操作数未返回数值，返回 Nan 可以避免抛出错误。</li><li>Nan 不等于本身</li><li>通过 isNan 可以判断</li></ul></li><li>类型转换<ul><li>类型转换的规则有点复杂。这里不加表述。如果想要了解更多，<a href="https://www.runoob.com/js/js-type-conversion.html" target="_blank" rel="noopener">参考文章</a></li></ul></li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li>字符字面量</li></ul><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8rzirdlnfj30bi0fkabg.jpg" alt="image-20191109163805648"></p><ul><li>字符串是可不变的，一旦创建，它的值就不可变。如果改变，就会销毁原来的字符串，用另外一个字符串填充。</li><li>转换字符串的方法<code>toString()</code>,这个方法将在第三篇文章介绍。这里需要了解的是，null 和 undefined 是没有<code>toString()</code>方法的</li></ul><h3 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object 对象"></a>Object 对象</h3><p>最后介绍这个特别特殊的类型。</p><blockquote><p>Object 类型是所有它的实例的基础。换句话说， Object 类型所具有的任何属性 、方法也同样存在于更具体的对象中。</p></blockquote><p>它具有以下属性和方法（常见）</p><ul><li>Construcctor 保存创建当前对象的函数</li><li>hasOwnproperty 检查属性是自身的还是继承的</li><li>isPrototypeOf 检查对象是否是另外一个对象的原型</li><li>propertyIsEnumerable 是否可以用<code>for in</code>来枚举</li></ul><p>关于 Obeject 对象，将会在后续的文章深入讨论。</p><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><ul><li>算术操作符</li><li>位操作符(不讨论)</li><li>关系操作符</li><li>相等操作符</li></ul><h4 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a>一元操作符</h4><blockquote><p>一元操作符： 只能 操作一个值的操作符叫做一元操作符</p></blockquote><p>递增： <code>++</code></p><p>递减：<code>--</code></p><p>如果放在前面。则先递增（递减）， 再参与运算。如果放在后面，则反之。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span><span class="token keyword">var</span> anotherAge <span class="token operator">=</span> <span class="token operator">--</span>age <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 28</span><span class="token function">alert</span><span class="token punctuation">(</span>anotherAge<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 30</span></code></pre><h3 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h3><ul><li>逻辑非 <code>!</code></li><li>逻辑与 `&amp;&amp;</li><li>逻辑或 <code>||</code></li></ul><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><ul><li>乘性</li><li>除</li><li>模</li><li>加减</li><li>等于<ul><li>需要注意<code>==</code>和<code>===</code>的区别。我个人在代码中一律用<code>===</code></li></ul></li><li>赋值</li></ul><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><ul><li>if</li><li>do-while</li><li>while</li><li>for</li><li>for in</li><li>break 和 continue</li><li>with</li><li>switch</li></ul><p>示例</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// if</span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> statement1 <span class="token keyword">else</span> statement2</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// do-while</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span>  i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// while</span><span class="token keyword">while</span> <span class="token punctuation">(</span>expression<span class="token punctuation">)</span> statement<span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// for</span><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//for-in语句是一种精准的迭代语句， 可以用来枚举 对象的属性。</span><span class="token keyword">for</span> <span class="token punctuation">(</span>property <span class="token keyword">in</span> expression<span class="token punctuation">)</span> statement<span class="token punctuation">;</span></code></pre><p>注意：为了保证最大限度的兼容性， 建议在使用 for-in 循环之前，先检测确认确认该对象的值不是 null 或 undefined</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// break &amp; continue</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//4</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//8</span></code></pre><p>Break 中止循环，continue 跳过这一次循环。</p><p>Es6 中的 foreach 不可被中止。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// switch</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>expression<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> value<span class="token punctuation">:</span>        statement <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> value<span class="token punctuation">:</span>        statement <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> value<span class="token punctuation">:</span>        statement <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> value<span class="token punctuation">:</span>        statementbreak<span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span> statement<span class="token punctuation">}</span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数的基本用法，这里不加讨论。需要注意以下两点</p><ul><li>推荐让函数始终都返回一个值，要么永远都不要返回 值。 否则，如果函数有时候返回值，有时候有不返回值，会给调试代码带来不便。</li><li>js 的函数参数，不关心传递了多少，也不关心传递了什么类型。原因是 ECMAScript 中的参数在内部是用 一个数组来表示的。 函数接收到的始终都是这个数组， 而不关心数组中包含哪些参数（ 如果有参数 的 话）。 如果这个数组中不包含任何元素， 无所谓； 如果包含多个元素， 也没有问题。 实际上， 在函数 体内可以通过 arguments 对象来访问这个参数数组， 从而获取传递给函数的每一个参数。</li><li>没有传递的参数将被赋值成<code>undefined</code></li></ul><p>通过 arguments 来获取参数个数示例</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">howManyArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">howManyArgs</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2 howManyArgs(); //0</span><span class="token function">howManyArgs</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span></code></pre><p>以上是对 js 基本内容的简介，下一回，我们将详细介绍<code>基本类型</code>和<code>引用类型</code>的区别以及<code>js的执行环境</code>和<code>垃圾回收机制</code>。敬请期待。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【读好书第二期】JS 的变量、作用域及内存问题</title>
      <link href="/2019/10/21/hello-world/"/>
      <url>/2019/10/21/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>JavaScript 变量松散类型的本质，决定了它只是在特定时间用于保存特定值的一个名字而已。</p></blockquote><p>因为上述的 javascript 变量的特质，导致 javascript 语言既强大又有趣，然而也会出现各种问题。</p><p>今天这篇文章，重点讲述了什么是变量，基本类型和引用类型的区别，作用域的相关概念。还简单描述了 javascript 的垃圾回收机制。</p><h2 id="基本类型-amp-引用类型"><a href="#基本类型-amp-引用类型" class="headerlink" title="基本类型&amp;引用类型"></a>基本类型&amp;引用类型</h2><blockquote><p>基本类型概念：基本类型是简单的数据段</p></blockquote><p>在上一次的文章中提到，基本类型有五种：</p><ul><li>undefined</li><li>null</li><li>string</li><li>boolean</li><li>number</li></ul><blockquote><p>引用类型概念：引用类型值指那些可能由多个值构成的对象。引用类型的值是按引用访问的。</p></blockquote><p>那么，怎么理解按引用访问呢？</p><p>引用类型的值是保存在内存中的对象，在操作对象时，实际上是在操作对象的引用而不是实际的对象。</p><h3 id="引用类型的动态属性"><a href="#引用类型的动态属性" class="headerlink" title="引用类型的动态属性"></a>引用类型的动态属性</h3><p>对于引用类型，我们可以为其添加<code>属性</code>和<code>方法</code>，也可以改变和删除<code>属性</code>和<code>方法</code>。</p><pre class=" language-javascript"><code class="language-javascript">varperson <span class="token operator">=</span> <span class="token function">newObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Nicholas"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"Nicholas"</span></code></pre><p>而对于基本类型，这种添加就是无效的了。</p><h3 id="复制变量的值"><a href="#复制变量的值" class="headerlink" title="复制变量的值"></a>复制变量的值</h3><ul><li>复制基本类型</li></ul><p>如果从一个变量向另一个变量复制基本类型的值，会在变量对象上创建一个新值，然后把该值复制到为新变量分配的位置上。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g998x08nnsj30dk0oi3zd.jpg" alt="image-20191124171403201"></p><p>也就是说，复制之后的变量和原变量相互独立。</p><ul><li>复制引用类型</li></ul><p>当从一个变量向另一个变量复制引用类型的值时，同样也会将存储在变量对象中的值复制一份放到为新变量分配的空间中。不同的是，这个值的副本实际上是一个指针，而这个指针指向存储在堆中的一个对象。复制操作结束后，两个变量实际上将引用同一个对象。因此，改变其中一个变量，就会影响另一个变量。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g998yst4mhj30py0g8myc.jpg" alt="image-20191124171552105"></p><h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><blockquote><p>ECMAScript 中所有函数的参数都是按值传递的。</p></blockquote><p>这意味着，引用类型在函数传参的时候，也是按照值传递，而不是引用传递。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">setName</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Nicholas"</span><span class="token punctuation">;</span>  obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Greg"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token function">newObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setName</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"Nicholas"</span></code></pre><p>出现上面这个情况的根本原因是：引用类型在参数传递是，也是按照值传递，而且当在函数内部重写 obj 时，这个变量引用的就是一个局部对象了。而这个局部对象会在函数执行完毕后立即被销毁。所以外部 alert 的 Person.name 是 Nicholas。</p><h3 id="类型检测"><a href="#类型检测" class="headerlink" title="类型检测"></a>类型检测</h3><p>类型检测的两种方式：</p><p>typeof 和 instanceof</p><p><code>typeof</code>的缺点在于，它只能检测出基本类型，而对于所有的引用类型（函数除外）都返回<code>Object</code>。</p><p>所以，如果你想检测一个引用类型的话，你应该这样处理：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//变量person是Object吗？</span><span class="token function">alert</span><span class="token punctuation">(</span>colors <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//变量colors是Array吗？</span><span class="token function">alert</span><span class="token punctuation">(</span>pattern <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//变量pattern是RegExp吗？</span></code></pre><h3 id="执行环境和作用域"><a href="#执行环境和作用域" class="headerlink" title="执行环境和作用域"></a>执行环境和作用域</h3><blockquote><p>执行环境定义了变量或函数有权访问的其他数据，决定了它们各自的行为。每个执行环境都有一个与之关联的变量对象（variableobject），环境中定义的所有变量和函数都保存在这个对象中。</p></blockquote><p>这个定义很重要，它表明每一个执行环境都有一个变量对象，用来保存变量和函数。比如全局的变量对象 windows。</p><p>而某个执行环境代码执行完毕时，这个变量对象就会被销毁，比如浏览器关闭的时候。windows 对象就会被销毁。</p><p>每个函数都有自己的执行环境。当执行流进入一个函数时，函数的环境就会被<code>推入</code>一个<code>环境栈</code>中。而在函数执行之后，栈将其环境弹出，把控制权返回给之前的执行环境。</p><h4 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h4><blockquote><p>当代码在一个环境中执行时，会创建变量对象的一个作用域链（scopechain）。保证对执行环境有权访问的所有变量和函数的有序访问。</p></blockquote><p>有序访问代表作用域是一层一层网上访问的。</p><p>作用域链的前端，始终都是当前执行的代码所在环境的变量对象。</p><p>如果这个环境是函数，则将其活动对象（activationobject）作为变量对象。</p><p>活动对象在最开始时只包含一个变量，即 arguments 对象（这个对象在全局环境中是不存在的）。</p><p>作用域链中的下一个变量对象来自包含（外部）环境，而再下一个变量对象则来自下一个包含环境。</p><p>这样，一直延续到全局执行环境。</p><p><strong>全局执行环境的变量</strong>对象始终都是作用域链中的<strong>最后一个对象</strong>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> color<span class="token operator">=</span><span class="token string">"blue"</span><span class="token punctuation">;</span><span class="token keyword">function</span> changeColor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> anotherColor<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">swapColors</span><span class="token punctuation">(</span>  <span class="token punctuation">{</span>    <span class="token keyword">var</span> tempColor<span class="token operator">=</span>anotherColor<span class="token punctuation">;</span>    anotherColor<span class="token operator">=</span>color<span class="token punctuation">;</span>    color<span class="token operator">=</span>tempColor<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里可以访问color、anotherColor和tempColor</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这里可以访问color和anotherColor，但不能访问tempColor</span>  <span class="token function">swapColors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这里只能访问colorchangeColor();</span><span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g999edmzcsj30f60i63yw.jpg" alt="image-20191124173051826"></p><p>下面两种方法可以延长作用域链</p><ul><li>trycatch 语句的 catch 块；</li><li>with 语句。</li></ul><p><strong>没有块级作用域</strong></p><p>我们在使用 for 循环的时候，常常有下面的困惑。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span>vari <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">doSomething</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//10</span></code></pre><p>这就是因为在 js 中没有块级作用域导致的。</p><p><strong>变量所在环境</strong></p><p>用 var 声明变量时，会被添加到最近的执行环境。如果没有使用 var，就会放到全局的变量环境。</p><p><strong>变量的搜索过程</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"blue"</span></code></pre><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g999muw8p9j30fa0h4wet.jpg" alt="image-20191124173900841"></p><p>上图表示，调用 getColor 方法的时候，会现在 getColor 的作用域寻找，如果没有，再到全局去寻找。</p><h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><blockquote><p>JavaScript 具有自动垃圾收集机制，也就是说，执行环境会负责管理代码执行过程中使用的内存。</p></blockquote><p>这种垃圾收集机制的原理其实很简单：找出那些不再继续使用的变量，然后释放其占用的内存。</p><p>如何知道哪些变量不再使用了呢？</p><p>有两种方法：</p><ul><li>标记清除</li><li>引用计数</li></ul><p>目前最常用的是标记清除的方法。</p><blockquote><p>当变量进入环境（例如，在函数中声明一个变量）时，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。</p></blockquote><p>以上就是本期内容，下一期我们将了解 javascript 中更加详细的引用类型了。一起期待吧！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
